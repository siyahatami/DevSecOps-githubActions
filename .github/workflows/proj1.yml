name: proj1 for nodejs

on:
  pull_request:
    branches: [main]
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      logLevel:
        description: 'Log level'     
        required: true
        default: 'warning'
            # echo "Log level: ${{ github.event.inputs.logLevel }}"




env:
  RELEASE_REVISION: "pr-${{ github.event.pull_request.number }}-${{ github.event.pull_request.head.sha }}"
  # KUBE_CONFIG_DATA: ${{ secrets.KUBE_CONFIG_DATA }}
  KUBE_NAMESPACE: proj1


jobs:                                            
  # CI:                                       
  #   name: CI                                
  #   runs-on: ubuntu-latest                       
  #   steps:                                       
  #     - name: Cancel Previous Runs               
  #       uses: styfle/cancel-workflow-action@0.4.1
  #       with:                                    
  #         access_token: ${{ github.token }} 
      
  #     - name: Checkout
  #       id: chackout                        
  #       uses: actions/checkout@v2                       
  #       with:                                           
  #         ref: ${{ github.event.pull_request.head.sha }}
  #         # submodules: recursive
  
  #     # - name: my test command
  #     #   env:
  #     #     AUTHOR_NAME: "siamak"
  #     #     # AUTHOR_NAME: ${{ steps.author.outputs.author }}
  #     #   run: |
  #     #     pwd
  #     #     ls -ld .
  #     #     ls -l
  #     #     echo "the author is: $AUTHOR_NAME"
      


  #     - uses: actions/setup-node@v2
  #       with:
  #         node-version: '14'
  #         cache: 'npm'
      
      
  #     - name: install dependencies
  #       run: |
  #         npm install
  #         npm run test
     

  #     # - name: Unit test
  #     #   run: npm run test


  #     - name: Login to DockerHub Registry
  #       run: echo ${{ secrets.DOCKERHUB_PASSWORD }} | docker login -u ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin
      
  #     - name: Build the tagged Docker image
  #       run: docker build . -f Dockerfile.prod -t siyahatami/proj1:${{github.run_id}}

  #     - name: Push the tagged Docker image
  #       run: docker push siyahatami/proj1:${{github.run_id}}




      # - name: Run Trivy vulnerability scanner
      #   uses: aquasecurity/trivy-action@master
      #   with:
      #     image-ref: 'docker.io/siyahatami/proj1:${{github.run_id}}'
      #     format: 'table'
      #     exit-code: '1'
      #     ignore-unfixed: true
      #     vuln-type: 'os,library'
      #     severity: 'CRITICAL,HIGH'

      


      # - name: Run Trivy vulnerability scanner in IaC mode
      #   uses: aquasecurity/trivy-action@master
      #   with:
      #     scan-type: 'config'
      #     hide-progress: false
      #     format: 'table'
      #     exit-code: '1'
      #     ignore-unfixed: true
      #     severity: 'CRITICAL,HIGH'

      # - name: Upload Trivy scan results to GitHub Security tab
      #   uses: github/codeql-action/upload-sarif@v1
      #   with:
      #     sarif_file: 'trivy-results.sarif'
  

        
      # - name: Run Trivy vulnerability scanner in repo mode
      #   uses: aquasecurity/trivy-action@master
      #   with:
      #     scan-type: 'fs'
      #     ignore-unfixed: true
      #     format: 'template'
      #     template: '@/contrib/sarif.tpl'
      #     output: 'trivy-results.sarif'
      #     severity: 'CRITICAL'

      # - name: Upload Trivy scan results to GitHub Security tab
      #   uses: github/codeql-action/upload-sarif@v1
      #   with:
      #     sarif_file: 'trivy-results.sarif'




  # --------------------------------------------------------------------------------------

  SAST:
    name: Scurity Scanner
    runs-on: ubuntu-latest
    steps:

      - name: Check out the repo
        uses: actions/checkout@v2
      

      - name: ZAP Scan
        uses: zaproxy/action-full-scan@v0.3.0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          docker_name: 'owasp/zap2docker-stable'
          target: 'http://185.135.30.87:30010/'
          rules_file_name: 'ci_cd/.zap/rules.tsv'
          cmd_options: '-a'
          # output: .github/workflows/zap-scan.yml
          
          # or 
          # docker run -i owasp/zap2docker-stable zap-cli quick-scan --self-contained \
          #   --start-options '-config api.disablekey=true' http://target

          #  docker run -p 8090:8090 -i owasp/zap2docker-stable zap.sh -daemon -port 8090 -host 0.0.0.0





  #     - name: run dependency check scan
  #       run: |
  #        docker run \
  #         --env SECURE_LOG_LEVEL=${SECURE_LOG_LEVEL} \
  #         -v "$PWD:/code" \
  #         -v /var/run/docker.sock:/var/run/docker.sock \
  #         registry.gitlab.com/gitlab-org/security-products/dependency-scanning:latest /code
  #         ls
  #         sudo apt-get install jq
  #         sudo pip install archerysec-cli
  #         DATE=`date +%Y-%m-%d`
  #         export PROJECT_ID=`archerysec-cli -s ${ARCHERYSEC_HOST} -u ${ARCHERYSEC_USER} -p ${ARCHERYSEC_PASS} --createproject \
  #        --project_name=devsecops --project_disc="devsecops project" --project_start=${DATE} \
  #        --project_end=${DATE} --project_owner=dev | tail -n1 | jq '.project_id' | sed -e 's/^"//' -e 's/"$//'`
  #         # Upload Scan report in archerysec
  #         export SCAN_ID=`archerysec-cli -s ${ARCHERYSEC_HOST} -u ${ARCHERYSEC_USER} -p ${ARCHERYSEC_PASS} \
  #         --upload --file_type=JSON --file=gl-dependency-scanning-report.json --TARGET=${GITHUB_SHA} \
  #         --scanner=gitlabsca --project_id=''$PROJECT_ID'' | tail -n1 | jq '.scan_id' | sed -e 's/^"//' -e 's/"$//'`
  #         echo "Scan Report Uploaded Successfully, Scan Id:" $SCAN_ID
  #       env:
  #         ARCHERYSEC_HOST: ${{ secrets.ARCHERYSEC_HOST }}
  #         ARCHERYSEC_USER: ${{ secrets.ARCHERYSEC_USER }}
  #         ARCHERYSEC_PASS: ${{ secrets.ARCHERYSEC_PASS }}



      # - name: run source code review
      #   run: |
      #    docker run \
      #     --volume "$PWD:/code" \
      #     --volume /var/run/docker.sock:/var/run/docker.sock \
      #     registry.gitlab.com/gitlab-org/security-products/sast:latest /app/bin/run /code
      #     ls
      #         sudo apt-get install jq
      #         sudo pip install archerysec-cli
      #       DATE=`date +%Y-%m-%d`
      #        export PROJECT_ID=`archerysec-cli -s ${ARCHERYSEC_HOST} -u ${ARCHERYSEC_USER} -p ${ARCHERYSEC_PASS} --createproject \
      #        --project_name=devsecops --project_disc="devsecops project" --project_start=${DATE} \
      #        --project_end=${DATE} --project_owner=dev | tail -n1 | jq '.project_id' | sed -e 's/^"//' -e 's/"$//'`
      #       export SCAN_ID=`archerysec-cli -s ${ARCHERYSEC_HOST} -u ${ARCHERYSEC_USER} -p ${ARCHERYSEC_PASS} \
      #       --upload --file_type=JSON --file=gl-sast-report.json --TARGET=${GITHUB_SHA} \
      #       --scanner=gitlabsast --project_id=''$PROJECT_ID'' | tail -n1 | jq '.scan_id' | sed -e 's/^"//' -e 's/"$//'`
      #       echo "Scan Report Uploaded Successfully, Scan Id:" $SCAN_ID
      #   env:
      #     ARCHERYSEC_HOST: ${{ secrets.ARCHERYSEC_HOST }}
      #     ARCHERYSEC_USER: ${{ secrets.ARCHERYSEC_USER }}
      #     ARCHERYSEC_PASS: ${{ secrets.ARCHERYSEC_PASS }}
      # - name: run DAST scan
      #   run: |
      #     # create wrk folder
      #     mkdir wrk
      #     chmod 777 wrk
      #     docker run \
      #      --volume $(pwd)/wrk:/output:rw \
      #      --volume $(pwd)/wrk:/zap/wrk:rw \
      #      registry.gitlab.com/gitlab-org/security-products/dast:latest /analyze -t ${ARCHERYSEC_HOST} \
      #     --auth-url ${ARCHERYSEC_AUTH_HOST} \
      #     --auth-username ${ARCHERYSEC_USER} \
      #     --auth-password ${ARCHERYSEC_PASS} \
      #     --auth-username-field 'username' \
      #     --auth-password-field 'password' \
      #     --auth-exclude-urls ${ARCHERYSEC_EXCLUDE_HOST} \
      #     --full-scan True \
      #      -x report.xml
      #     sudo apt-get install jq
      #     sudo pip install archerysec-cli
      #     DATE=`date +%Y-%m-%d`
      #     export PROJECT_ID=`archerysec-cli -s ${ARCHERYSEC_HOST} -u ${ARCHERYSEC_USER} -p ${ARCHERYSEC_PASS} --createproject \
      #     --project_name=devsecops --project_disc="devsecops project" --project_start=${DATE} \
      #     --project_end=${DATE} --project_owner=dev | tail -n1 | jq '.project_id' | sed -e 's/^"//' -e 's/"$//'`
      #     export SCAN_ID=`archerysec-cli -s ${ARCHERYSEC_HOST} -u ${ARCHERYSEC_USER} -p ${ARCHERYSEC_PASS} \
      #     --upload --file_type=XML --file=wrk/report.xml --TARGET=${GITHUB_SHA} \
      #     --scanner=zap_scan --project_id=''$PROJECT_ID'' | tail -n1 | jq '.scan_id' | sed -e 's/^"//' -e 's/"$//'`
      #     echo "Scan Report Uploaded Successfully, Scan Id:" $SCAN_ID
      #   env:
      #     ARCHERYSEC_HOST: ${{ secrets.ARCHERYSEC_HOST }}
      #     ARCHERYSEC_AUTH_HOST: ${{ secrets.ARCHERYSEC_AUTH_HOST }}
      #     ARCHERYSEC_EXCLUDE_HOST: ${{ secrets.ARCHERYSEC_EXCLUDE_HOST }}
      #     ARCHERYSEC_USER: ${{ secrets.ARCHERYSEC_USER }}
      #     ARCHERYSEC_PASS: ${{ secrets.ARCHERYSEC_PASS }}

      # - name: run Infrastructure Scan
      #   run: |
      #     sudo apt-get install jq
      #     sudo pip install archerysec-cli
      #     DATE=`date +%Y-%m-%d`
      #     export PROJECT_ID=`archerysec-cli -s ${ARCHERYSEC_HOST} -u ${ARCHERYSEC_USER} -p ${ARCHERYSEC_PASS} --createproject \
      #     --project_name=devsecops --project_disc="devsecops project" --project_start=${DATE} \
      #     --project_end=${DATE} --project_owner=dev | tail -n1 | jq '.project_id' | sed -e 's/^"//' -e 's/"$//'`
      #     export SCAN_ID=`archerysec-cli -s ${ARCHERYSEC_HOST} -u ${ARCHERYSEC_USER} -p ${ARCHERYSEC_PASS} \
      #     --openvasscan --target_ip=${ARCHERYSEC_TARGET_HOST} --project_id=${PROJECT_ID}`
      #   env:
      #     ARCHERYSEC_HOST: ${{ secrets.ARCHERYSEC_HOST }}
      #     ARCHERYSEC_USER: ${{ secrets.ARCHERYSEC_USER }}
      #     ARCHERYSEC_PASS: ${{ secrets.ARCHERYSEC_PASS }}
      #     ARCHERYSEC_TARGET_HOST: ${{ secrets.ARCHERYSEC_TARGET_HOST }}


  # --------------------------------------------------------------------------------------



  # Codeql:
  #   runs-on: ubuntu-latest                       
  #   needs: CI
  #   permissions:
  #     security-events: write
  #     # actions: read
  #     # contents: read

  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v2

  #     - name: Initialize CodeQL
  #       uses: github/codeql-action/init@v1
  #       with:
  #         languages: javascript
  #         config-file: ./.github/codeql/codeql-config.yml

  #     - name: Perform CodeQL Analysis
  #       uses: github/codeql-action/analyze@v1






  # # Deliver:
  # #   runs-on: ubuntu-latest                       
  # #   needs: CI
  # #   steps:

  # #     - name: Checkout
  # #       uses: actions/checkout@v2






  # CD:
  #   name: Deploy                                
  #   runs-on: ubuntu-latest                       
  #   needs: CI
  #   steps:

  #     - name: Checkout
  #       uses: actions/checkout@v2


  #     - name: configuring kubectl
  #       run: |
  #         curl -LO "https://dl.k8s.io/release/v1.21.0/bin/linux/amd64/kubectl"
  #         chmod +x ./kubectl
  #         sudo mv ./kubectl /usr/local/bin/kubectl
  #         echo ${{ secrets.KUBER_CONFIG_base64 }} | base64 --decode > kube_config
  #         sudo mkdir -p ~/.kube
  #         sudo mv kube_config ~/.kube/config
  #         export KUBECONFIG=~/.kube/config
  #         kubectl cluster-info


  #     - name: update infra ymls
  #       run: sed -i 's/image_tag/${{github.run_id}}/g' infra/web-depl.yaml


  #     - name: deploy
  #       run: kubectl apply -f infra/ -n proj1

  #     - name: deploy2
  #       run: kubectl get all -n proj1







